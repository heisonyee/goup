// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rvflash/goup/internal/mod (interfaces: Module,Mod)

// Package mod is a generated GoMock package.
package mod

import (
	gomock "github.com/golang/mock/gomock"
	mod "github.com/rvflash/goup/internal/mod"
	semver "github.com/rvflash/goup/internal/semver"
	reflect "reflect"
)

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Indirect mocks base method
func (m *MockModule) Indirect() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indirect")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Indirect indicates an expected call of Indirect
func (mr *MockModuleMockRecorder) Indirect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indirect", reflect.TypeOf((*MockModule)(nil).Indirect))
}

// Path mocks base method
func (m *MockModule) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockModuleMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockModule)(nil).Path))
}

// Version mocks base method
func (m *MockModule) Version() semver.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(semver.Tag)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockModuleMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockModule)(nil).Version))
}

// MockMod is a mock of Mod interface
type MockMod struct {
	ctrl     *gomock.Controller
	recorder *MockModMockRecorder
}

// MockModMockRecorder is the mock recorder for MockMod
type MockModMockRecorder struct {
	mock *MockMod
}

// NewMockMod creates a new mock instance
func NewMockMod(ctrl *gomock.Controller) *MockMod {
	mock := &MockMod{ctrl: ctrl}
	mock.recorder = &MockModMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMod) EXPECT() *MockModMockRecorder {
	return m.recorder
}

// Dependencies mocks base method
func (m *MockMod) Dependencies() []mod.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]mod.Module)
	return ret0
}

// Dependencies indicates an expected call of Dependencies
func (mr *MockModMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockMod)(nil).Dependencies))
}

// Module mocks base method
func (m *MockMod) Module() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Module")
	ret0, _ := ret[0].(string)
	return ret0
}

// Module indicates an expected call of Module
func (mr *MockModMockRecorder) Module() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Module", reflect.TypeOf((*MockMod)(nil).Module))
}
